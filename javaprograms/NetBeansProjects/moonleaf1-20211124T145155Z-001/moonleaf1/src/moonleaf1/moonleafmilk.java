/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package moonleaf1;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import oracle.jdbc.OraclePreparedStatement;
import oracle.jdbc.OracleResultSet;

/**
 *
 * @author lenovo
 */
public class moonleafmilk extends javax.swing.JFrame {
    Connection  conn= Moonleaf1.ConnecrDb();
    OraclePreparedStatement pst= null ;
    OracleResultSet rs= null; 
    double atdog;

    /**
     * Creates new form moonleafmilk
     */
    public moonleafmilk() {
        initComponents();
        Toolkit  toolkit= getToolkit();
        Dimension size = toolkit.getScreenSize();
        setLocation(size.width/2 - getWidth()/2, size .height/2 - getHeight()/2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton24 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        bmtr = new javax.swing.JButton();
        bmtt = new javax.swing.JButton();
        cmtr = new javax.swing.JButton();
        cmtt = new javax.swing.JButton();
        cmtmsr = new javax.swing.JButton();
        cmtmst = new javax.swing.JButton();
        hmtr = new javax.swing.JButton();
        hmtt = new javax.swing.JButton();
        honmtr = new javax.swing.JButton();
        honmtt = new javax.swing.JButton();
        houmtr = new javax.swing.JButton();
        houmtt = new javax.swing.JButton();
        jasmtr = new javax.swing.JButton();
        jasmtt = new javax.swing.JButton();
        lychmsr = new javax.swing.JButton();
        lychmst = new javax.swing.JButton();
        mangomtr = new javax.swing.JButton();
        mangomtt = new javax.swing.JButton();
        matchaeggmsr = new javax.swing.JButton();
        matcheggmst = new javax.swing.JButton();
        matchmtr = new javax.swing.JButton();
        matchmtt = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabelClose6 = new javax.swing.JLabel();
        JLabelMin6 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        display = new javax.swing.JTextArea();
        total = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        clear = new javax.swing.JButton();
        payment = new javax.swing.JButton();
        addons = new javax.swing.JButton();
        add1 = new javax.swing.JButton();
        back = new javax.swing.JButton();
        back1 = new javax.swing.JButton();

        jButton24.setFont(new java.awt.Font("Ink Free", 1, 11)); // NOI18N
        jButton24.setForeground(new java.awt.Color(102, 204, 0));
        jButton24.setText("Add-ons");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 204, 0), 3, true));

        jLabel2.setFont(new java.awt.Font("Ebrima", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("R");

        jLabel3.setFont(new java.awt.Font("Ebrima", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("R");

        jLabel4.setFont(new java.awt.Font("Ebrima", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("T");

        jLabel5.setFont(new java.awt.Font("Ebrima", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("T");

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel7.setText("Banana Milk Tea");

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel8.setText("Caramel Milk Tea");

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel9.setText("Mango Milk Tea");

        jLabel10.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel10.setText("Hakka Milk Tea");

        jLabel11.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel11.setText("House Milk Tea");

        jLabel12.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel12.setText("Honey Milk Tea");

        jLabel13.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel13.setText("Jasmine Milk Tea");

        jLabel14.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel14.setText("Lychee Milk Slush");

        jLabel20.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel20.setText("Matcha Eggnog Milkslush");

        jLabel21.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        jLabel21.setText("Matcha Milk Tea");

        jLabel15.setFont(new java.awt.Font("Trebuchet MS", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(102, 204, 0));
        jLabel15.setText("Milkslush");

        bmtr.setBackground(new java.awt.Color(240, 251, 154));
        bmtr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        bmtr.setText("Php 95");
        bmtr.setBorder(null);
        bmtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmtrActionPerformed(evt);
            }
        });

        bmtt.setBackground(new java.awt.Color(240, 251, 154));
        bmtt.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        bmtt.setText("Php 105");
        bmtt.setBorder(null);
        bmtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bmttActionPerformed(evt);
            }
        });

        cmtr.setBackground(new java.awt.Color(240, 251, 154));
        cmtr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        cmtr.setText("Php 90");
        cmtr.setBorder(null);
        cmtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmtrActionPerformed(evt);
            }
        });

        cmtt.setBackground(new java.awt.Color(240, 251, 154));
        cmtt.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        cmtt.setText("Php 100");
        cmtt.setBorder(null);
        cmtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmttActionPerformed(evt);
            }
        });

        cmtmsr.setBackground(new java.awt.Color(240, 251, 154));
        cmtmsr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        cmtmsr.setText("Php 135");
        cmtmsr.setBorder(null);
        cmtmsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmtmsrActionPerformed(evt);
            }
        });

        cmtmst.setBackground(new java.awt.Color(240, 251, 154));
        cmtmst.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        cmtmst.setText("Php 145");
        cmtmst.setBorder(null);
        cmtmst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmtmstActionPerformed(evt);
            }
        });

        hmtr.setBackground(new java.awt.Color(240, 251, 154));
        hmtr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        hmtr.setText("Php 85");
        hmtr.setBorder(null);
        hmtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hmtrActionPerformed(evt);
            }
        });

        hmtt.setBackground(new java.awt.Color(240, 251, 154));
        hmtt.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        hmtt.setText("Php 95");
        hmtt.setBorder(null);
        hmtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hmttActionPerformed(evt);
            }
        });

        honmtr.setBackground(new java.awt.Color(240, 251, 154));
        honmtr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        honmtr.setText("Php 85");
        honmtr.setBorder(null);
        honmtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                honmtrActionPerformed(evt);
            }
        });

        honmtt.setBackground(new java.awt.Color(240, 251, 154));
        honmtt.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        honmtt.setText("Php 95");
        honmtt.setBorder(null);
        honmtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                honmttActionPerformed(evt);
            }
        });

        houmtr.setBackground(new java.awt.Color(240, 251, 154));
        houmtr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        houmtr.setText("Php 70");
        houmtr.setBorder(null);
        houmtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houmtrActionPerformed(evt);
            }
        });

        houmtt.setBackground(new java.awt.Color(240, 251, 154));
        houmtt.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        houmtt.setText("Php 80");
        houmtt.setBorder(null);
        houmtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                houmttActionPerformed(evt);
            }
        });

        jasmtr.setBackground(new java.awt.Color(240, 251, 154));
        jasmtr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        jasmtr.setText("Php 70");
        jasmtr.setBorder(null);
        jasmtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jasmtrActionPerformed(evt);
            }
        });

        jasmtt.setBackground(new java.awt.Color(240, 251, 154));
        jasmtt.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        jasmtt.setText("Php 80");
        jasmtt.setBorder(null);
        jasmtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jasmttActionPerformed(evt);
            }
        });

        lychmsr.setBackground(new java.awt.Color(240, 251, 154));
        lychmsr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        lychmsr.setText("Php 135");
        lychmsr.setBorder(null);
        lychmsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lychmsrActionPerformed(evt);
            }
        });

        lychmst.setBackground(new java.awt.Color(240, 251, 154));
        lychmst.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        lychmst.setText("Php 145");
        lychmst.setBorder(null);
        lychmst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lychmstActionPerformed(evt);
            }
        });

        mangomtr.setBackground(new java.awt.Color(240, 251, 154));
        mangomtr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        mangomtr.setText("Php 90");
        mangomtr.setBorder(null);
        mangomtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mangomtrActionPerformed(evt);
            }
        });

        mangomtt.setBackground(new java.awt.Color(240, 251, 154));
        mangomtt.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        mangomtt.setText("Php 100");
        mangomtt.setBorder(null);
        mangomtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mangomttActionPerformed(evt);
            }
        });

        matchaeggmsr.setBackground(new java.awt.Color(240, 251, 154));
        matchaeggmsr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        matchaeggmsr.setText("Php 160");
        matchaeggmsr.setBorder(null);
        matchaeggmsr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchaeggmsrActionPerformed(evt);
            }
        });

        matcheggmst.setBackground(new java.awt.Color(240, 251, 154));
        matcheggmst.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        matcheggmst.setText("Php 170");
        matcheggmst.setBorder(null);
        matcheggmst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matcheggmstActionPerformed(evt);
            }
        });

        matchmtr.setBackground(new java.awt.Color(240, 251, 154));
        matchmtr.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        matchmtr.setText("Php 115");
        matchmtr.setBorder(null);
        matchmtr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchmtrActionPerformed(evt);
            }
        });

        matchmtt.setBackground(new java.awt.Color(240, 251, 154));
        matchmtt.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        matchmtt.setText("Php 125");
        matchmtt.setBorder(null);
        matchmtt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchmttActionPerformed(evt);
            }
        });

        jPanel8.setBackground(new java.awt.Color(153, 204, 0));

        jLabelClose6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabelClose6.setForeground(new java.awt.Color(255, 255, 255));
        jLabelClose6.setText("X");
        jLabelClose6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabelClose6MouseClicked(evt);
            }
        });

        JLabelMin6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        JLabelMin6.setForeground(new java.awt.Color(255, 255, 255));
        JLabelMin6.setText("_");
        JLabelMin6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JLabelMin6MouseClicked(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 24)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Milk Form");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 450, Short.MAX_VALUE)
                .addComponent(JLabelMin6)
                .addGap(18, 18, 18)
                .addComponent(jLabelClose6)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelClose6)
                            .addComponent(JLabelMin6))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        display.setBackground(new java.awt.Color(0, 0, 0));
        display.setColumns(20);
        display.setFont(new java.awt.Font("Arial Unicode MS", 1, 14)); // NOI18N
        display.setForeground(new java.awt.Color(255, 255, 255));
        display.setRows(5);
        display.setBorder(null);
        jScrollPane2.setViewportView(display);

        total.setBackground(new java.awt.Color(51, 51, 51));
        total.setForeground(new java.awt.Color(255, 255, 255));
        total.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Total", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\lenovo\\Documents\\NetBeansProjects\\moonleaf1-20200125T075433Z-001\\moonleaf1\\Photo\\Menu Icon\\Milk.jpg")); // NOI18N

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/moonleaf1/moonleaflogo (Custom) (Custom).jpg"))); // NOI18N

        jLabel19.setFont(new java.awt.Font("Ink Free", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(153, 204, 0));
        jLabel19.setText("Moonleaf Cafe");

        clear.setBackground(new java.awt.Color(204, 0, 0));
        clear.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        clear.setForeground(new java.awt.Color(255, 255, 255));
        clear.setText("clear");
        clear.setBorder(null);
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        payment.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        payment.setForeground(new java.awt.Color(51, 204, 0));
        payment.setText("payment");
        payment.setBorder(null);
        payment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paymentActionPerformed(evt);
            }
        });

        addons.setBackground(new java.awt.Color(0, 0, 0));
        addons.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        addons.setForeground(new java.awt.Color(255, 255, 0));
        addons.setText("Add-ons");
        addons.setBorder(null);
        addons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addonsActionPerformed(evt);
            }
        });

        add1.setBackground(new java.awt.Color(0, 204, 204));
        add1.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        add1.setText("Add");
        add1.setBorder(null);
        add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add1ActionPerformed(evt);
            }
        });

        back.setBackground(new java.awt.Color(0, 0, 0));
        back.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        back.setForeground(new java.awt.Color(255, 255, 0));
        back.setText("back");
        back.setBorder(null);
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        back1.setBackground(new java.awt.Color(0, 0, 0));
        back1.setFont(new java.awt.Font("Ink Free", 1, 14)); // NOI18N
        back1.setForeground(new java.awt.Color(255, 255, 0));
        back1.setText("Next Page");
        back1.setBorder(null);
        back1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel21))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jasmtr, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(99, 99, 99)
                                .addComponent(bmtr, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel13)
                                    .addComponent(jLabel9))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(houmtr, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(91, 91, 91)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(matchmtr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(mangomtr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(hmtr, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(honmtr, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(91, 91, 91)
                                        .addComponent(cmtr, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mangomtt)
                            .addComponent(matchmtt)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jasmtt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(houmtt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(honmtt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(hmtt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bmtt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                                    .addComponent(cmtt, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(61, 61, 61)
                                        .addComponent(jLabel15))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(38, 38, 38)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cmtmsr)
                                            .addComponent(lychmsr)
                                            .addComponent(matchaeggmsr))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(matcheggmst)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cmtmst)
                                                    .addComponent(lychmst))))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addGap(188, 188, 188)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(total, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(back1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(add1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addons, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(payment, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel19)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bmtt)
                        .addComponent(bmtr)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(cmtt)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmtmsr)
                        .addComponent(cmtmst))
                    .addComponent(cmtr))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(hmtr)
                    .addComponent(hmtt))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(honmtt)
                    .addComponent(honmtr))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(houmtt))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jasmtt))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(lychmsr)
                            .addComponent(lychmst))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(mangomtt)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(houmtr)
                        .addGap(18, 18, 18)
                        .addComponent(jasmtr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mangomtr)))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(matchaeggmsr)
                    .addComponent(matcheggmst))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(matchmtr)
                    .addComponent(matchmtt))
                .addGap(105, 105, 105))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(total, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear)
                    .addComponent(add1)
                    .addComponent(addons)
                    .addComponent(payment)
                    .addComponent(back)
                    .addComponent(back1))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hmtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hmtrActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String hakkamtr,newline,name,price;
         name="Hakka Milk Tea(Regular)";
         price="85.00";
        double hmilktr=85.00;
        hakkamtr="Hakka Milk Tea(Regular)=P85.00";
        newline="\n";
        display.setText(display.getText()+hakkamtr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+hmilktr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Hakka Milk Tea',SIZEE='Regular',PRICEORDER=85.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
       
         try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_hmtrActionPerformed

    private void honmtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_honmtrActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String honeymtr,newline,name,price;
         name="Honey Milk Tea(Regular)";
         price="85.00";
        double honmilktr=85.00;
        honeymtr="Honey Milk Tea(Regular)=P85.00";
        newline="\n";
        display.setText(display.getText()+honeymtr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+honmilktr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Honey Milk Tea',SIZEE='Regular',PRICEORDER=85.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
       
         try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_honmtrActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
         try {
            String content;
            content=new String(Files.readAllBytes(Paths.get("copy.txt")));
                    display.setText(content);
        } catch (IOException ex) {
            Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
        }
        
          try {
            String content;
            content=new String(Files.readAllBytes(Paths.get("total.txt")));
                    total.setText(content);
        } catch (IOException ex) {
            Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void bmtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmtrActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
        String bananamtr,newline,name,price;
        name="Banana Milk Tea(Regular)";
        price="95.00";
        double bnmilktr=95.00;
        bananamtr="Banana Milk Tea(Regular)=P95.00";
        newline="\n";;
        display.setText(display.getText()+bananamtr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+bnmilktr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Banana Milk Tea',SIZEE='Regular',PRICEORDER=95.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
       
         try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_bmtrActionPerformed

    private void bmttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bmttActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String bananamtt,newline,name,price;
         name="Banana Milk Tea(Tall)";
         price="105.00";
         double bnmilktt=105.00;
        bananamtt="Banana Milk Tea(Tall)=P105.00";
        newline="\n";;
        display.setText(display.getText()+bananamtt);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+bnmilktt;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
      try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Banana Milk Tea',SIZEE='Tall',PRICEORDER=105.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
        
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_bmttActionPerformed

    private void cmtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmtrActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
        String caramtr,newline,name,price;
        name="Caramel Milk Tea(Regular)";
        price="90.00";
        double cmilktr=90.00;
        caramtr="Caramel Milk Tea(Regular)=P90.00";
        newline="\n";
        display.setText(display.getText()+caramtr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+cmilktr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Caramel Milk Tea',SIZEE='Regular',PRICEORDER=90.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_cmtrActionPerformed

    private void cmttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmttActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String caramtt,newline,name,price;
         name="Caramel Milk Tea(Tall)";
         price="100.00";
        double cmilktt=100.00;
        caramtt="Caramel Milk Tea(Tall)=P100.00";
        newline="\n";
        display.setText(display.getText()+caramtt);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+cmilktt;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Caramel Milk Tea',SIZEE='Tall',PRICEORDER=100.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
        
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_cmttActionPerformed

    private void cmtmsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmtmsrActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String caramsr,newline,name,price;
         name="Caramel Milk Slush(Regular)";
         price="135.00";
        double cmilksr=135.00;
        caramsr="Caramel Milk Slush(Regular)=P135.00";
        newline="\n";
        display.setText(display.getText()+caramsr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+cmilksr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
       try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Caramel Milk Slush',SIZEE='Regular',PRICEORDER=135.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_cmtmsrActionPerformed

    private void cmtmstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmtmstActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String caramst,newline,name,price;
         name="Caramel Milk Slush(Tall)";
         price="145.00";
        double cmilkst=145.00;
        caramst="Caramel Milk Slush(Tall)=P145.00";
        newline="\n";
        display.setText(display.getText()+caramst);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+cmilkst;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
       try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Caramel Milk Slush',SIZEE='Tall',PRICEORDER=145.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_cmtmstActionPerformed

    private void hmttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hmttActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String hakkamtt,newline,name,price;
         name="Hakka Milk Tea(Tall)";
         price="95.00";
        double hmilktt=95.00;
        hakkamtt="Hakka Milk Tea(Tall)=P95.00";
        newline="\n";
        display.setText(display.getText()+hakkamtt);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+hmilktt;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Hakka Milk Tea',SIZEE='Tall',PRICEORDER=95.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_hmttActionPerformed

    private void honmttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_honmttActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
        String honeymtt,newline,name,price;
        name="Honey Milk Tea(Tall)";
        price="95.00";
        double honmilktt=95.00;
        honeymtt="Honey Milk Tea(Tall)=P95.00";
        newline="\n";
        display.setText(display.getText()+honeymtt);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+honmilktt;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Honey Milk Tea',SIZEE='Tall',PRICEORDER=95.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_honmttActionPerformed

    private void houmtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houmtrActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
        String housemtr,newline,name,price;
        name="House Milk Tea(Regular)";
        price="70.00";
        double housemilktr=70.00;
        housemtr="House Milk Tea(Regular)=P70.00";
        newline="\n";
        display.setText(display.getText()+housemtr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+housemilktr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='House Milk Tea',SIZEE='Regular',PRICEORDER=70.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_houmtrActionPerformed

    private void houmttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_houmttActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String housemtt,newline,name,price;
         name="House Milk Tea(Tall)";
         price="80.00";
        double housemilktt=80.00;
        housemtt="House Milk Tea(Tall)=P80.00";
        newline="\n";
        display.setText(display.getText()+housemtt);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+housemilktt;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='House Milk Tea',SIZEE='Tall',PRICEORDER=80.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_houmttActionPerformed

    private void jasmtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jasmtrActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String jasminemtr,newline,name,price;
         name="Jasmine Milk Tea(Regular)";
         price="70.00";
        double jasminemilktr=70.00;
        jasminemtr="Jasmine Milk Tea(Regular)=P70.00";
        newline="\n";
        display.setText(display.getText()+jasminemtr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+jasminemilktr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
     try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Jasmine Milk Tea',SIZEE='Regular',PRICEORDER=70.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_jasmtrActionPerformed

    private void jasmttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jasmttActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
          String jasminemtt,newline,name,price;
          name="Jasmine Milk Tea(Tall)";
          price="80.00";
        double jasminemilktt=80.00;
        jasminemtt="Jasmine Milk Tea(Tall)=P80.00";
        newline="\n";
        display.setText(display.getText()+jasminemtt);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+jasminemilktt;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
       try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Jasmine Milk Tea',SIZEE='Tall',PRICEORDER=80.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_jasmttActionPerformed

    private void lychmsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lychmsrActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
          String lycheemsr,newline,name,price;
          name="Lychee Milk Slush(Regular)";
          price="135.00";
        double lycheemilksr=135.00;
        lycheemsr="Lychee Milk Slush(Regular)=P135.00";
        newline="\n";
        display.setText(display.getText()+lycheemsr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+lycheemilksr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
       try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Lychee Milk Slush',SIZEE='Regular',PRICEORDER=135.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_lychmsrActionPerformed

    private void lychmstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lychmstActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
        String lycheemst,newline,name,price;
        name="Lychee Milk Slush(Tall)";
        price="145.00";
        double lycheemilkst=145.00;
        lycheemst="Lychee Milk Slush(Tall)=P145.00";
        newline="\n";
        display.setText(display.getText()+lycheemst);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+lycheemilkst;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
       try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Lychee Milk Slush',SIZEE='Tall',PRICEORDER=145.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_lychmstActionPerformed

    private void mangomtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mangomtrActionPerformed
        // TODO add your handling code here
        conn= Moonleaf1.ConnecrDb();
          String mangmtr,newline,name,price;
          name="Mango Milk Tea(Regular)";
          price="90.00";
        double mangmilktr=90.00;
        mangmtr="Mango Milk Tea(Regular)=P90.00";
        newline="\n";
        display.setText(display.getText()+mangmtr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+mangmilktr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
       try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Mango Milk Tea',SIZEE='Regular',PRICEORDER=90.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_mangomtrActionPerformed

    private void mangomttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mangomttActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String mangmtt,newline,name,price;
         name="Mango Milk Tea(Tall)";
         price="100.00";
        double mangmilktt=100.00;
        mangmtt="Mango Milk Tea(Tall)=P100.00";
        newline="\n";
        display.setText(display.getText()+mangmtt);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+mangmilktt;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Mango Milk Tea',SIZEE='Tall',PRICEORDER=100.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_mangomttActionPerformed

    private void matchaeggmsrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchaeggmsrActionPerformed
        // TODO add your handling code here
        conn= Moonleaf1.ConnecrDb();
            String matchegmsr,newline,name,price;
        double matchaegmilksr=160.00;
        name="Matcha Eggnog Milk Slush(Regular)";
        price="160.00";
        matchegmsr="Matcha Eggnog Milk Slush(Regular)=P160.00";
        newline="\n";
        display.setText(display.getText()+matchegmsr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+matchaegmilksr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Matcha Eggnogg Milk Slush',SIZEE='Regular',PRICEORDER=160.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
        
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_matchaeggmsrActionPerformed

    private void matcheggmstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matcheggmstActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String matchegmst,newline,name,price;
         name="Matcha Eggnog Milk Slush(Tall)";
         price="170.00";
        double matchaegmilkst=170.00;
        matchegmst="Matcha Eggnog Milk Slush(Tall)=P170.00";
        newline="\n";
        display.setText(display.getText()+matchegmst);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+matchaegmilkst;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Matcha Eggnog Milk Slush',SIZEE='Tall',PRICEORDER=170.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_matcheggmstActionPerformed

    private void matchmtrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchmtrActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
          String matchamtr,newline,name,price;
          name="Matcha Milk Tea(Regular)";
          price="115.00";
        double matchamilktr=115.00;
        matchamtr="Matcha Milk Tea(Regular)=P115.00";
        newline="\n";
        display.setText(display.getText()+matchamtr);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+matchamilktr;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
        try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Matcha Milk Tea',SIZEE='Regular',PRICEORDER=115.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_matchmtrActionPerformed

    private void matchmttActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchmttActionPerformed
        // TODO add your handling code here:
        conn= Moonleaf1.ConnecrDb();
         String matchamtt,newline,name,price;
         name="Matcha Milk Tea(Tall)";
         price="125.00";
        double matchamilktt=125.00;
        matchamtt="Matcha Milk Tea(Tall)=P125.00";
        newline="\n";
        display.setText(display.getText()+matchamtt);
        display.append(newline);
        
         atdog=Double.parseDouble(total.getText())+matchamilktt;
       total.setText(""+atdog);
        DecimalFormat decimalFormat = new DecimalFormat("#.00");
         String number2;
           number2 = decimalFormat.format(atdog);
            total.setText(String.valueOf(number2));
       try{
             
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED "
                    + "set PROD='Matcha Milk Tea',SIZEE='Tall',PRICEORDER=125.00 where DATEORDERED= to_timestamp('"+content+"')");
            conn.close();
        } catch (Exception e) {
           
         }
       
       
          try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println(display.getText());
            display.setText(display.getText());
            writer.close();
            
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println(total.getText());
            total.setText(total.getText());
            writer.close();
        }  catch (FileNotFoundException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           } catch (UnsupportedEncodingException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
          try(FileWriter writer=new FileWriter("officialreceipt.txt",true)){
            PrintWriter pwriter=new PrintWriter(writer);
            pwriter.println(name+"                "+price);
            pwriter.close();
        }  catch (IOException ex) {
               Logger.getLogger(moonleafmilk.class.getName()).log(Level.SEVERE, null, ex);
           }
        
         System.out.println(name+"                    "+price);
    }//GEN-LAST:event_matchmttActionPerformed

    private void jLabelClose6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelClose6MouseClicked
        // Close
        System.exit(0);
    }//GEN-LAST:event_jLabelClose6MouseClicked

    private void JLabelMin6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JLabelMin6MouseClicked
        // TODO add your handling code here

        this.setState(javax.swing.JFrame.ICONIFIED);
    }//GEN-LAST:event_JLabelMin6MouseClicked

    private void totalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_totalActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat sdf=new SimpleDateFormat ("dd-MMM-yy hh:mm:ss aa");
        String datee=sdf.format(new Date()).toString();
        conn=Moonleaf1.ConnecrDb();

        display.setText("");
        total.setText("0.00");

        try{
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            Statement st= conn.createStatement();
            st.executeUpdate("UPDATE ORDERED SET STATUS='CHANGED' WHERE DATEORDERED= to_timestamp('"+content+"')");
            st.executeUpdate("DELETE ORDERED WHERE STATUS='CHANGED'");
            st.executeUpdate("DELETE ORDERED WHERE STATUS='ADD'");
            st.executeUpdate("INSERT INTO ORDERED VALUES ('"+datee+"','','','','','','')");
            conn.close();
            try(PrintWriter writer=new PrintWriter("time.txt", "UTF-8")){
                writer.println(datee);

                writer.close();}
        } catch (Exception e) {

        }

        try(PrintWriter writer=new PrintWriter("copy.txt", "UTF-8")){
            writer.println("");
            display.setText(display.getText());
            writer.close();
        }

        catch (FileNotFoundException ex) {
            Logger.getLogger(moonleafbasicsize.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(moonleafbasicsize.class.getName()).log(Level.SEVERE, null, ex);
        }

        //clearing totaaaaaalllllll
        try(PrintWriter writer=new PrintWriter("total.txt", "UTF-8")){
            writer.println("");
            total.setText(total.getText());
            writer.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(moonleafbasicsize.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(moonleafbasicsize.class.getName()).log(Level.SEVERE, null, ex);
        }

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        try(PrintWriter writer=new PrintWriter("officialreceipt.txt", "UTF-8")){
            writer.println("                   *Moonleaf Cafe*                     ");
            writer.println("                 "+ datee);
            writer.println("Order"+"                                          "+ "Price");
            writer.close();} catch (FileNotFoundException ex) {
            Logger.getLogger(moonleafbasicsize.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(moonleafbasicsize.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_clearActionPerformed

    private void paymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paymentActionPerformed
        // TODO add your handling code here:
        paymentmoonleaf user=new paymentmoonleaf();
        user.setVisible(true);
        user.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_paymentActionPerformed

    private void addonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addonsActionPerformed
        // TODO add your handling code here:
        addons user=new addons();
        user.setVisible(true);
        user.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_addonsActionPerformed

    private void add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add1ActionPerformed
        // TODO add your handling code here:
        conn=Moonleaf1.ConnecrDb();
        SimpleDateFormat sdf=new SimpleDateFormat ("dd-MMM-yy hh:mm:ss aa");
        String datee=sdf.format(new Date()).toString();

        try{

            Statement st= conn.createStatement();
            String content;
            content=new String(Files.readAllBytes(Paths.get("time.txt")));
            st.executeUpdate("UPDATE ORDERED SET STATUS='ADD' WHERE DATEORDERED=to_timestamp('"+content+"')");
            st.executeUpdate("INSERT INTO ORDERED "+ "VALUES('"+datee+"','','','','','','')");
            conn.close();
            try(PrintWriter writer=new PrintWriter("time.txt", "UTF-8")){
                writer.println(datee);
                writer.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {

        }
    }//GEN-LAST:event_add1ActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        // TODO add your handling code here:
        frame1 user=new frame1();
        user.setVisible(true);
        user.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void back1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back1ActionPerformed
        moonleafmilknext user=new moonleafmilknext();
        user.setVisible(true);
        user.setLocationRelativeTo(null);
        this.dispose();
    }//GEN-LAST:event_back1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(moonleafmilk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(moonleafmilk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(moonleafmilk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(moonleafmilk.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new moonleafmilk().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabelMin6;
    private javax.swing.JButton add1;
    private javax.swing.JButton addons;
    private javax.swing.JButton back;
    private javax.swing.JButton back1;
    private javax.swing.JButton bmtr;
    private javax.swing.JButton bmtt;
    private javax.swing.JButton clear;
    private javax.swing.JButton cmtmsr;
    private javax.swing.JButton cmtmst;
    private javax.swing.JButton cmtr;
    private javax.swing.JButton cmtt;
    private javax.swing.JTextArea display;
    private javax.swing.JButton hmtr;
    private javax.swing.JButton hmtt;
    private javax.swing.JButton honmtr;
    private javax.swing.JButton honmtt;
    private javax.swing.JButton houmtr;
    private javax.swing.JButton houmtt;
    private javax.swing.JButton jButton24;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelClose6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jasmtr;
    private javax.swing.JButton jasmtt;
    private javax.swing.JButton lychmsr;
    private javax.swing.JButton lychmst;
    private javax.swing.JButton mangomtr;
    private javax.swing.JButton mangomtt;
    private javax.swing.JButton matchaeggmsr;
    private javax.swing.JButton matcheggmst;
    private javax.swing.JButton matchmtr;
    private javax.swing.JButton matchmtt;
    private javax.swing.JButton payment;
    private javax.swing.JTextField total;
    // End of variables declaration//GEN-END:variables
}
